{"version":3,"sources":["reportWebVitals.js","components/AddCategory.jsx","helpers/getGif.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGif.js","GifExpertApp.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategory","useState","inputValue","setInputValue","placeholderValues","categoryInput","useRef","counter","placeholdersLength","length","useEffect","timeoutId","setTimeout","trim","clearTimeout","setInterval","current","setAttribute","ref","type","value","onChange","e","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","gif","id","title","images","fixed_height","height","width","GifDiv","styled","div","GifImage","img","props","GifGridItem","className","src","alt","GifGrid","loading","state","setState","imgs","useFetchGif","propTypes","setCategories","func","isRequired","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a040e35d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, useEffect, useRef } from 'react'\n\nconst AddCategory = ({ setCategory }) => {\n\n    //State\n    const [inputValue, setInputValue] = useState(\"\");\n    const [placeholderValues, setplaceHolderValues] = useState([\"Search all the GIFs and Stickers\",\n        \"@username + tag to search within a verified channel\"])\n\n    //Ref\n    const categoryInput = useRef(null)\n\n    //Variables\n    var counter = 0;\n    var placeholdersLength = placeholderValues.length;\n\n    useEffect(() => {\n        const timeoutId = setTimeout(() => {\n            if (inputValue.trim().length > 0) {\n                setCategory(inputValue)\n            } else {\n                setCategory(\"\")\n            }\n        }, 500);\n        return () => clearTimeout(timeoutId);\n\n    }, [inputValue, setCategory])\n\n    const handleSearch = e => {\n        setInputValue(e.target.value)\n    }\n\n    const changePlaceholder = () => {\n        if (counter >= placeholdersLength) {\n            counter = 0;\n        }\n        categoryInput.current.setAttribute('placeholder',placeholderValues[counter])\n        counter++;\n    }\n\n    setInterval(changePlaceholder, 2000);\n\n    return (\n        <form>\n            <div>\n                <input\n                    ref={categoryInput}\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleSearch}\n                />\n            </div>\n        </form>\n    )\n}\n\nexport default AddCategory\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=kps4T2oEQ9wtjpq7Dmg4hf6DH0oiQ4uD`\n    const response = await fetch(url);\n    const { data } = await response.json();\n\n    const gifs = data.map(gif => {\n        return {\n            id: gif.id,\n            title: gif.title,\n            url: gif.images?.fixed_height.url,\n            height: gif.images?.fixed_height.height,\n            width: gif.images?.fixed_height.width\n        }\n    })\n\n    return gifs;\n}","import React from 'react';\nimport styled from 'styled-components';\nimport 'animate.css';\n\n    const GifDiv = styled.div`\n        align-content: center;\n        margin-bottom: 10px;\n        margin-right: 10px;\n        \n    `\n\n    const GifImage = styled.img`\n        min-height: ${props => props.height}; \n        min-width:  ${props => props.width};\n    `\n\n    /* const GifText = styled.p`\n        padding: 5px;\n        text-align: center;\n    ` */\n\nconst GifGridItem = ({ id, title, url, height, width }) => {\n    \n\n    return (\n        <GifDiv className=\"card animate__animated animate__fadeIn\">\n            <GifImage src={url} alt={title} />\n        </GifDiv>\n    )\n}\n\nexport default GifGridItem\n","import React, { useState, useEffect } from 'react'\nimport { useFetchGif } from '../hooks/useFetchGif';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\n\n    const { data: images, loading } = useFetchGif(category);\n\n    return (\n        <>\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n            <div className=\"card-grid\">\n                {   \n                    category \n                    ? \n                        images.map(img => (\n                            <GifGridItem key={img.id} {...img} />\n                        ))\n                    :\n                            <h1>Nada...</h1>\n                }\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGif\"\n\n\nexport const useFetchGif = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            })\n    }, [category])\n\n    return state;\n}","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory'\nimport propTypes from 'prop-types'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = () => {\n\n    //const categories = ['One Punch', 'Samurai X', 'One Piece']\n\n    const [category, setCategory] = useState('')\n\n    return (\n        <>\n            <h2 className=\"title_text\">GifExpertApp</h2>\n            <AddCategory\n                setCategory={setCategory}\n            />\n            <hr />\n\n            <GifGrid key={category} category={category} />\n\n        </>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: propTypes.func.isRequired\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}